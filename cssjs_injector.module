<?php

/*
*  Fromea AB - cssjs_injector
*  Created by Andreas Sateras
*/
/*
    Version. 7-x 0.1

    This is a module of the two combined modules css_injector and js_injector. 
    I wrote it because of the disadvantage that often css files and js files is sharing the same pathrules when used on a website, and with a rulesfile it's easier to versioncontroll the rules.
    One more advantage is that with multiple rulefiles it's possible to use one or more rule file for multisitepurposes.

    The jsonfile could possibly be handled in an UI, but is not done at the moment.


    The rules files of this module is defined in the variable 'cssjs_jsonpath'. 
    Either set it from drush with drush vset cssjs_jsonpath E.g. with two files "/drupal/www/global/cssjs.json /drupal/www/public_html/sites/default/cssjs.json".
    The rulepaths should be defined with a space between them.

    Below is an example of a file with defined rules.

{
    "rules": [
        {
            "title": "Hide show filter",
            "admin_description": "A button is created that you can show and hide filter on admin pages on",
            "pathrules": ["foo","foo/*"],
            "files": [
                {"path": "sites/all/files/css/hide-show-filter.css","type":"css","media":"all"},
                {"path": "sites/all/files/js/hide-show-filter.js", "type": "js","position":"footer"}
            ]
        },
        {
             "title": "Show cycling image ",
             "admin_description": "Test description",
             "pathrules": ["<front>","/node/42"],
             "files": [
                {"path": "sites/all/files/css/showcycling.css", "type": "css","media":"all"}
            ]
        }
    ]
}


*/
function cssjs_injector_variable_info($options) {
    $variables['cssjs_global_jsonpaths'] = array(
        'title' => t('CSSJs injector global jsonfile paths'),
        'type' => 'text',
        'group' => 'CSSJS Injector',
        'description' => t('Css and Javascript Json rulesfiles that describes which css and js-files that should be included on the website. Should contain absolute paths separated by spaces<br/>see readme file for example.'),
        'required' => FALSE
    );

    $variables['cssjs_site_jsonpaths'] = array(
        'title' => t('CSSJs injector site jsonfile paths'),
        'type' =>'text',
        'group' => 'CSSJS Injector',
        'description' => t('Css and Javascript sitespecifik Json rulesfilels that describes which css and js-file that should be included on the website. Should contain absolute paths separated by spaces<br/>see readme file for example.'),
        'required' => FALSE
    );

    return $variables;


}
function cssjs_injector_init() {

   $global_jsonpaths = variable_get('cssjs_global_jsonpaths')==null?"":variable_get('cssjs_global_jsonpaths');

   $site_jsonpaths = variable_get('cssjs_site_jsonpaths')==null?"":variable_get('cssjs_site_jsonpaths');
    
    $jsonpaths  = $global_jsonpaths.$site_jsonpaths;


    cssjs_log("Variable cssjs_jsonpaths: @jsonpaths",array('@jsonpaths'=>$jsonpaths),WATCHDOG_DEBUG);

    if($jsonpaths=="")
    {
        cssjs_log("The variable cssjs_jsonpaths is not set",array(),WATCHDOG_ERROR);
        return;
    }

    $jsonpathsarray = explode(' ',$jsonpaths);
    

    foreach($jsonpathsarray as $jsonpath) {
        
    	$ruleobject = cssjs_injector_loadrules($jsonpath);

        if(gettype($ruleobject)=="object" && gettype($ruleobject->rules)=="array"){
            foreach($ruleobject->rules as $rule) {
                cssjs_injector_initrule($rule);
            }
        }
    }
}

function cssjs_injector_loadrules($jsonpath) {
	
    $exists = file_exists($jsonpath);
    if($exists == false) {
      cssjs_log("file does not exist: @jsonpath", array('@jsonpath'=>$jsonpath), WATCHDOG_ALERT) ;
      return false;
    }

    $rulescontent = file_get_contents($jsonpath);

    cssjs_log("content of file @jsonpath is <br/> @rulescontent",array('@jsonpath'=> $jsonpath,'@rulescontent'=>$rulescontent),WATCHDOG_NOTICE);
 
	$ruleobject = json_decode($rulescontent, FALSE);
	

    cssjs_log('Serialized content of json file: @jsonpath is <br/> @ruleobject',array('@jsonpath'=>$jsonpath,'@ruleobject'=>print_r(serialize($ruleobject),true)),WATCHDOG_INFO);
	return $ruleobject;

}

function cssjs_injector_initrule($rule) {

	$cssindex = 0;
	$jsindex = 0;

    cssjs_log('cssjs_injector_initrule(...)<br/>@rule',array('@rule'=>serialize($rule)),WATCHDOG_INFO);

	foreach($rule->files as $file){
		
		$pathrulesstring = implode("\n",$rule->pathrules);
	
		// If rule evaluates, add file
		if(cssjs_evaluate_rule($pathrulesstring, $file)){	
		
			if($file->type == "css"){				
				cssjs_injector_addcss($rule, $file,$cssindex++);
			}
			else if($file->type == "js") {
				cssjs_injector_addjs($rule, $file,$jsindex++);		
			}	
		}
	}
}

function cssjs_injector_addcss($rule, $file, $fileindex) {

	// Add the css-file
	$file_uri = cssjs_injector_uri($file->path);	

	switch ($file->media) {
		case 'all':
		case 'screen':
		case 'print':
		  drupal_add_css($file_uri, array('type' => 'file','group' => CSS_THEME,'media' => $file->media));
		  break;

		case 'IE 7':
		case 'IE 8':
		case 'IE 9':
		  drupal_add_css($file_uri, array(
			'group' => CSS_THEME,
			'browsers' => array('IE' => $file->media, '!IE' => FALSE),
		  ));
		  break;
	  }
}


function cssjs_injector_addjs($rule, $file, $fileindex) {

    // Add the js-file
    $file_uri = cssjs_injector_uri($file->path);
    drupal_add_js($file_uri, array(
      'type' => 'file',
      'scope' => $file->position,
      // this group has the highest weight
      'group' => JS_THEME,
      'every_page' => FALSE,
      // Since we're trying to give the administrator complete control, we'll
      // move JS that this module has added to a high weight, higher even than
      // the theme's JS files. Currently the weight is 200 + the crid, which is
      // currently higher than Bartik's JS.
      'weight' => 200 + $fileindex,
    ));
	
}

function cssjs_evaluate_rule($pathrules,$file) {
      $path = drupal_get_path_alias($_GET['q']);

      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, $pathrules);

      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pathrules);
      }

      return $page_match;
}

function cssjs_injector_uri($path){
	$uri = $path;
    return $uri;
}

function cssjs_log($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = null) {

   $error_level = variable_get('error_level');
    if( $error_level == 2 || $error_level == 1 &&  $severity <= WATCHDOG_WARNING) {
        watchdog('cssjs injetor',$message, $variables, $severity, $link);
    }
}
?>

