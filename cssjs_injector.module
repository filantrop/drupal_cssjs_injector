<?php

/*
*  Fromea AB - cssjs_injector
*  Created by Andreas Sateras
*/

function cssjs_injector_init() {
    
    $jsonpaths  =  variable_get('cssjs_jsonpaths');


    cssjs_log("Variable cssjs_jsonpaths: @jsonpaths",array('@jsonpaths'=>$jsonpaths),WATCHDOG_DEBUG);

    if(isset($jsonpaths)==false)
    {
        cssjs_log("The variable cssjs_jsonpaths is not set",array(),WATCHDOG_ERROR);
        return;
    }

    $jsonpathsarray = explode(' ',$jsonpaths);
    

    foreach($jsonpathsarray as $jsonpath) {
        
    	$ruleobject = cssjs_injector_loadrules($jsonpath);
	
	    foreach($ruleobject->rules as $rule) {
            cssjs_injector_initrule($rule);   
       	}
    }
}

function cssjs_injector_loadrules($jsonpath) {
	
    $exists = file_exists($jsonpath);
    if($exists == false) {
      cssjs_log("file does not exist: @jsonpath", array('@jsonpath'=>$jsonpath), WATCHDOG_ALERT) ;
      return false;
    }

    $rulescontent = file_get_contents($jsonpath);

    cssjs_log("content of file @jsonpath is <br/> @rulescontent",array('@jsonpath'=> $jsonpath,'@rulescontent'=>$rulescontent),WATCHDOG_NOTICE);
 
	$ruleobject = json_decode($rulescontent, FALSE);
	

    cssjs_log('Serialized content of json file: @jsonpath is <br/> @ruleobject',array('@jsonpath'=>$jsonpath,'@ruleobject'=>print_r(serialize($ruleobject),true)),WATCHDOG_INFO);
	return $ruleobject;

}

function cssjs_injector_initrule($rule) {

	$cssindex = 0;
	$jsindex = 0;

    cssjs_log('cssjs_injector_initrule(...)<br/>@rule',array('@rule'=>serialize($rule)),WATCHDOG_INFO);

	foreach($rule->files as $file){
		
		$pathrulesstring = implode("\n",$rule->pathrules);
	
		// If rule evaluates, add file
		if(cssjs_evaluate_rule($pathrulesstring, $file)){	
		
			if($file->type == "css"){				
				cssjs_injector_addcss($rule, $file,$cssindex++);
			}
			else if($file->type == "js") {
				cssjs_injector_addjs($rule, $file,$jsindex++);		
			}	
		}
	}
}

function cssjs_injector_addcss($rule, $file, $fileindex) {

	// Add the css-file
	$file_uri = cssjs_injector_uri($file->path);	

	switch ($file->media) {
		case 'all':
		case 'screen':
		case 'print':
		  drupal_add_css($file_uri, array('type' => 'file','group' => CSS_THEME,'media' => $file->media));
		  break;

		case 'IE 7':
		case 'IE 8':
		case 'IE 9':
		  drupal_add_css($file_uri, array(
			'group' => CSS_THEME,
			'browsers' => array('IE' => $path->media, '!IE' => FALSE),		
		  ));
		  break;
	  }
}


function cssjs_injector_addjs($rule, $file, $fileindex) {

    // Add the js-file
    $file_uri = cssjs_injector_uri($file->path);
    drupal_add_js($file_uri, array(
      'type' => 'file',
      'scope' => $file->position,
      // this group has the highest weight
      'group' => JS_THEME,
      'every_page' => FALSE,
      // safe guard to ensure inline files are never preprocessed
      //'preprocess' => $rule->inline == 1 ? FALSE : $rule->preprocess,
      // since we're trying to give the administrator complete control, we'll
      // move JS that this module has added to a high weight, higher even than
      // the theme's JS files. Currently the weight is 200 + the crid, which is
      // currently higher than Bartik's JS.
      'weight' => 200 + $fileindex,
    ));
	
}

function cssjs_evaluate_rule($pathrules,$file) {
      $path = drupal_get_path_alias($_GET['q']);

      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, $pathrules);

      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pathrules);
      }

      return $page_match;
}

function cssjs_injector_uri($path){
	$uri = $path;
    return $uri;
}

function cssjs_log($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = null) {

   $error_level = variable_get('error_level');
    if( $error_level == 2 || $error_level == 1 &&  $severity <= WATCHDOG_WARNING) {

        echo "test";
        watchdog('cssjs injetor',$message, $variables, $severity, $link);
    }
}
?>

